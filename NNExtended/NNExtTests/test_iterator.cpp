#include <algorithm>
#include <array>
#include <chrono>
#include <numeric>
#include <random>
#include <ranges>

#include <iterator.hpp>

// clang-format off
    #include <gtest/gtest.h>
// clang-format on

static constexpr auto MAX_ELEMS { 1000LLU };
static constexpr auto NSTRIDES { 150LLU };

#pragma region RANDOM_NUMBERS

static constexpr int random_numbers[] {
    11656, 10709, 12987, 19803, 17521, 10291, 11217, 10697, 12731, 11163, 16102, 19944, 15395, 16805, 16859, 17639, 14246, 10314, 16251,
    17133, 17971, 16097, 11235, 14995, 17195, 13620, 11376, 13364, 14856, 14964, 14703, 16625, 16478, 17133, 18716, 14874, 13709, 13966,
    12897, 11998, 11456, 16697, 12216, 16435, 10343, 10653, 16297, 18529, 10319, 19661, 10456, 11272, 16712, 16033, 17401, 12655, 17751,
    10865, 10297, 13660, 11658, 15245, 14629, 14633, 18689, 16973, 17218, 13762, 10811, 16319, 18443, 15741, 18861, 11498, 10190, 15194,
    15387, 17131, 15744, 16809, 12548, 15058, 11438, 12989, 11485, 13149, 18477, 16276, 17406, 14813, 19784, 17235, 18571, 18304, 18921,
    16604, 14478, 16359, 17734, 16173, 11434, 13548, 15474, 10698, 12866, 10086, 17429, 15780, 14908, 16474, 16954, 17216, 15558, 18802,
    18028, 10254, 12620, 15574, 16660, 13158, 17159, 14854, 16264, 12063, 12709, 15751, 13355, 18964, 19590, 10341, 19752, 19402, 18347,
    18968, 17897, 19935, 16086, 16611, 16703, 10956, 17260, 15690, 18607, 11589, 12400, 14428, 19726, 13003, 18289, 12160, 19035, 18904,
    17023, 16298, 12996, 10860, 11375, 10202, 19997, 10283, 17666, 13550, 10722, 12486, 12573, 18425, 14309, 14087, 19988, 16568, 14198,
    13079, 19776, 17977, 10702, 11523, 14661, 15670, 19044, 18132, 11494, 16351, 12234, 15685, 14818, 18589, 15401, 12553, 10060, 10239,
    15167, 17151, 12030, 12127, 10959, 14046, 17356, 15535, 10517, 17775, 18422, 16238, 16747, 16889, 12446, 17468, 16976, 19473, 11887,
    12342, 14368, 19796, 15629, 15007, 12888, 13541, 12003, 10293, 14160, 14804, 15092, 17483, 13984, 19439, 15376, 15852, 17840, 16975,
    10431, 17901, 16270, 11304, 11479, 19666, 12617, 16194, 16173, 16697, 18562, 16087, 14551, 15989, 14852, 11586, 15019, 13495, 14001,
    17201, 13110, 13181, 15139, 13217, 13699, 14958, 10320, 10689, 19318, 13638, 12442, 17974, 15467, 14971, 12065, 13127, 14433, 18230,
    18763, 13320, 17947, 18402, 13154, 14309, 14975, 19416, 17511, 11569, 16257, 11665, 17791, 14014, 19337, 13883, 18760, 12788, 10772,
    18452, 17865, 19192, 13681, 19225, 13337, 14013, 15303, 15332, 10827, 11981, 15748, 16750, 14337, 10976, 16627, 18317, 12089, 15127,
    14183, 11464, 19784, 19817, 13333, 16453, 17598, 10406, 18831, 15987, 18652, 18430, 17511, 11227, 18621, 18444, 13142, 12679, 11353,
    10637, 16925, 13096, 18190, 11987, 10321, 13980, 17694, 18609, 11767, 18290, 19200, 12228, 17770, 13724, 10945, 18423, 16767, 12195,
    18781, 18267, 14598, 19438, 12839, 18567, 14227, 19250, 14431, 13921, 17578, 11636, 10167, 16056, 10217, 17042, 11671, 11781, 15972,
    16168, 14939, 13251, 15329, 17804, 17002, 12187, 16832, 12177, 15877, 10739, 16414, 10989, 14667, 10212, 10936, 10812, 11159, 17025,
    17820, 17017, 11777, 18885, 14408, 19415, 13516, 12966, 10329, 19799, 17659, 11057, 15583, 15594, 14433, 10180, 17045, 13529, 17406,
    13300, 16416, 18234, 13279, 10362, 11118, 16293, 15346, 15472, 12315, 19971, 15151, 13590, 15067, 13076, 14800, 16685, 13494, 16626,
    11691, 13844, 15761, 14262, 18025, 13956, 10541, 19572, 15314, 18280, 17479, 17731, 10755, 19469, 15111, 11075, 12257, 13743, 18549,
    15244, 13458, 15887, 18344, 12643, 12962, 16612, 19238, 15870, 13613, 11505, 16212, 15950, 10007, 10670, 16721, 14018, 12791, 18570,
    11406, 16689, 15390, 12235, 14827, 16300, 13700, 13846, 13505, 15685, 10899, 18864, 14841, 11028, 13356, 12607, 18312, 12626, 14390,
    16538, 12570, 10341, 18364, 10390, 11904, 13817, 17663, 12459, 17556, 19892, 18744, 15091, 18108, 19980, 14591, 14777, 16230, 12113,
    17284, 13472, 15388, 19467, 18868, 12605, 14045, 10555, 19326, 10971, 17086, 15520, 11593, 18354, 15856, 16527, 12545, 19533, 18925,
    10945, 18479, 11647, 18612, 14333, 18870, 16007, 19239, 16840, 14316, 19864, 10674, 11207, 15721, 15533, 16452, 10948, 12863, 10778,
    11093, 14272, 16754, 17741, 14968, 15776, 17818, 17975, 10580, 15178, 17639, 19499, 12452, 10576, 18752, 11241, 10125, 12512, 18081,
    13855, 10883, 18264, 12255, 16051, 10395, 13058, 18808, 19439, 19963, 11360, 18137, 12095, 13090, 11652, 18446, 10383, 16213, 15412,
    16238, 11371, 12256, 14872, 11903, 10840, 18490, 18759, 11150, 17296, 16592, 12764, 14197, 12344, 14827, 11827, 19721, 13475, 16462,
    11565, 19697, 18425, 13359, 15999, 18434, 16781, 13862, 16703, 16209, 10918, 12416, 11511, 13161, 18835, 11914, 15635, 16955, 12801,
    10521, 12831, 19541, 10372, 19791, 18204, 18197, 15046, 12867, 11018, 16112, 15387, 11454, 10110, 12493, 16590, 18847, 12927, 16878,
    18018, 14446, 11809, 19725, 15671, 11024, 11717, 13308, 18552, 17308, 16771, 10860, 12175, 10146, 11340, 16386, 10172, 13104, 18672,
    16978, 19826, 19346, 12637, 18671, 17574, 15547, 19208, 19553, 11994, 12850, 11518, 13569, 18037, 16772, 10900, 13872, 15307, 11795,
    14414, 12171, 15209, 13906, 15998, 15885, 11217, 16737, 18444, 19798, 13127, 17542, 16442, 11711, 17065, 15791, 12507, 17199, 14395,
    13833, 19760, 13407, 10331, 19151, 10776, 14246, 18173, 18277, 13563, 12793, 14097, 16841, 18715, 14916, 19494, 13284, 11937, 12733,
    19697, 10798, 11893, 19667, 15269, 19663, 18808, 19003, 19794, 13588, 11534, 18111, 18397, 19423, 13001, 14414, 14514, 14050, 16258,
    12032, 13573, 10511, 19201, 18208, 10166, 13123, 12966, 19111, 16478, 11863, 11030, 11742, 14834, 10012, 13699, 13567, 16467, 15097,
    15983, 14624, 10826, 16967, 16469, 13347, 18779, 15312, 17531, 11347, 10657, 10478, 10098, 12314, 12213, 15793, 16813, 18500, 19044,
    14944, 11684, 12842, 16639, 10040, 13092, 19765, 11639, 16109, 12783, 11209, 10028, 18135, 17548, 11590, 15488, 10336, 18450, 11796,
    18374, 18810, 10306, 17868, 15679, 19236, 18520, 12173, 16368, 13431, 13841, 14135, 16615, 10115, 10063, 18546, 17435, 17109, 12502,
    18630, 11012, 16181, 13693, 12982, 18887, 18210, 18811, 11213, 12668, 18927, 15722, 15033, 19812, 12617, 12520, 11203, 13908, 10390,
    14408, 15946, 14484, 15280, 10967, 10312, 10768, 14272, 17125, 19706, 19177, 17654, 12547, 17826, 11399, 12139, 11663, 14715, 18646,
    14761, 17179, 10416, 17366, 14664, 10721, 19169, 17882, 16281, 10824, 13541, 18073, 11968, 19422, 15934, 18501, 19197, 19131, 11379,
    17588, 19346, 16037, 12219, 19851, 11938, 18991, 15233, 10900, 17778, 16157, 14944, 12005, 18253, 18788, 12215, 16578, 11247, 15365,
    16664, 16024, 11585, 12987, 17954, 12420, 17086, 17952, 10293, 19414, 12196, 11556, 14373, 19954, 14212, 11049, 15960, 15114, 14669,
    18675, 19127, 16659, 14469, 13681, 15533, 18183, 17042, 18286, 18752, 13524, 17884, 16006, 15581, 17611, 11491, 12732, 19619, 19953,
    12724, 12078, 16928, 19323, 10561, 18269, 13995, 16456, 12973, 15367, 16760, 15263, 12243, 16389, 14006, 12290, 13271, 18882, 15304,
    17380, 17178, 11402, 19260, 13896, 17014, 13546, 13936, 11416, 13743, 15021, 15175, 13682, 11502, 15004, 18331, 19914, 12161, 11968,
    12127, 12913, 11233, 17098, 14963, 13910, 11151, 19885, 18651, 13869, 10474, 16140, 18919, 17577, 13558, 10991, 18000, 18302, 11424,
    17584, 12396, 10362, 16796, 12052, 18930, 18414, 13505, 12734, 17720, 16151, 11852, 10293, 10637, 13802, 19548, 15410, 10873, 18083,
    19796, 17900, 18819, 12008, 14697, 12975, 16948, 18504, 18406, 16405, 12518, 13397, 17419, 19070, 12719, 14098, 14654, 17350, 17275,
    17280, 11923, 12412, 11376, 13997, 14484, 13521, 15572, 12266, 12142, 10678, 15487, 19139, 14610, 11964, 19351, 15063, 12972, 14480,
    12357, 18499, 12632, 13745, 10872, 19571, 19261, 14992, 15659, 13691, 19574, 12993, 17373, 16006, 19853, 15381, 12178, 10981, 13042,
    12217, 10975, 12825, 16786, 19841, 12261, 11811, 11933, 18456, 17051, 11873, 11524, 18834, 11620, 11272, 12050, 13756, 11728, 12934,
    16864, 17233, 18356, 19016, 19326, 15351, 18282, 10147, 15136, 19166, 18389, 17161, 14663, 12794, 18660, 18079, 11204, 14239, 12809,
    14415, 16406, 14594, 13716, 13887, 16151, 10694, 17014, 16540, 10718, 16226, 19948, 14453, 12721, 18490, 17975, 16069, 11645, 15166,
    13254, 16833, 11711, 12112, 17594, 19897, 14791, 11320, 15239, 18394, 12900, 17631, 14835, 19006, 13005, 14855, 10315, 19107, 17000,
    13527, 14441, 12457, 14063, 19537, 10622, 13178, 11131, 18432, 13764, 15696, 19046, 14131, 19820, 19869, 12075, 16512, 11566, 17411,
    19272, 17878, 12523, 17961, 13187, 12872, 16495, 17546, 15087, 18211, 14959, 17618, 14981, 16750, 11323, 17067, 10042, 13800, 16439,
    10745, 12652, 14612, 12013, 13173, 19228, 18927, 15097, 19944, 13236, 15084, 13030, 13436, 17950, 18021, 16275, 16261, 18895, 16647,
    11988, 10593, 10769, 11650, 13360, 12154, 17751, 15309, 14778, 18833, 17901, 11782, 14441, 13275, 13381, 14365, 12266, 19768, 19561,
    11840, 18993, 11921, 19077, 12804, 10397, 15664, 15613, 18059, 10175, 14810, 15329, 14738, 19001, 10680, 11910, 15609, 14944, 19051,
    12798, 16129, 15205, 17608, 14170, 10177, 11403, 11388, 18114, 16521, 14049, 19370, 14266, 14348, 18929, 12691, 19413, 14363, 19785,
    19112, 12299, 12168, 16459, 16599, 10091, 11223, 11369, 11535, 11505, 12553, 12868, 17533, 15587, 18084, 16966, 15666, 12663, 11564,
    14713, 11939, 14936, 16243, 15664, 10252, 12374, 12010, 19553, 14810, 12411, 16701, 14503, 12403, 10835, 15177, 14314, 18070, 11662,
    18878, 18266, 13493, 11262, 18005, 15343, 16003, 17617, 15877, 12427, 17354, 15138, 17612, 18953, 15474, 12266, 11015, 12980, 18526,
    16346, 17908, 18663, 10062, 19499, 16064, 14467, 17138, 16765, 10315, 13308, 16445, 14351, 18124, 17835, 10302, 16902, 16572, 15913,
    16341, 18076, 10570, 17961, 12750, 14486, 13693, 17999, 10014, 16698, 13670, 16161, 15971, 11668, 12053, 17136, 12879, 17821, 10835,
    15964, 14882, 19692, 13463, 18953, 12138, 12133, 14829, 11453, 15145, 19078, 12241, 19439, 17289, 14228, 12959, 10382, 17171, 17301,
    17132, 16846, 18090, 15033, 13927, 13192, 17356, 14151, 12431, 18864, 10703, 16428, 11340, 15212, 11413, 17498, 14373, 19991, 13594,
    14096, 17195, 16004, 18937, 12127, 14919, 19683, 19234, 18338, 14316, 16667, 15000, 18937, 10337, 16195, 13588, 10423, 15538, 16694,
    12073, 18044, 12719, 16775, 14622, 11189, 14555, 13434, 14062, 11563, 13086, 18066, 17773, 10259, 16501, 15681, 14616, 14276, 10246,
    13837, 19380, 12930, 10085, 18694, 11025, 19692, 18501, 14290, 11551, 12820, 17386, 18438, 18962, 16888, 19015, 12795, 19095, 18283,
    18001, 19609, 18492, 10071, 18528, 14574, 12964, 16016, 13299, 15472, 17422, 19861, 14649, 17776, 19239, 18608, 17182, 15632, 14275,
    17309, 17021, 19795, 10624, 18382, 19070, 18382, 19546, 13433, 14762, 13512, 18658, 16932, 13604, 10473, 12570, 16662, 17741, 10163,
    17670, 11245, 17361, 12008, 10042, 10252, 18996, 17002, 14828, 11217, 14650, 13334, 13919, 14378, 11021, 16353, 13647, 15397, 18669,
    17038, 18055, 14080, 18975, 18405, 11679, 10584, 14316, 16587, 18884, 10404, 17524, 11155, 14660, 14306, 13845, 17840, 10221, 16699,
    19697, 19372, 11787, 16882, 16176, 19654, 11472, 19225, 17783, 11138, 16159, 12474, 18621, 12550, 18003, 10508, 10822, 17770, 19202,
    18573, 16724, 10439, 11090, 19311, 19264, 13819, 10464, 18957, 13054, 16656, 16968, 16311, 15474, 19306, 13475, 19907, 13024, 14673,
    13155, 13994, 18638, 18577, 14793, 19693, 18505, 13466, 10584, 19429, 13932, 14402, 10181, 13649, 16325, 19308, 16276, 17223, 19502,
    11002, 17768, 15243, 12248, 11633, 19650, 19271, 13452, 11466, 16117, 18920, 14847, 12565, 17798, 13864, 15000, 10216, 16059, 18300,
    19520, 11075, 15857, 19700, 15396, 16547, 10534, 17198, 11647, 15568, 16555, 18005, 10565, 14717, 12136, 15493, 16435, 18330, 17670,
    13713, 12494, 14492, 13082, 10337, 15671, 11416, 19945, 15742, 17077, 14799, 15653, 15281, 13046, 11875, 14815, 16723, 10522, 15258,
    14823, 10963, 14344, 13167, 10371, 15569, 13190, 18997, 18617, 15882, 15556, 17163, 10814, 11518, 12693, 19920, 10864, 17988, 14067,
    17078, 17675, 11787, 10887, 12407, 16753, 15143, 15024, 11689, 18189, 17240, 11958, 16127, 13700, 17644, 17754, 15266, 15175, 18397,
    12026, 17796, 11248, 10802, 15048, 18207, 12141, 12752, 13009, 18628, 10466, 19733, 17614, 14948, 18963, 16792, 16210, 16059, 14163,
    12597, 14810, 15879, 14771, 13303, 15369, 10811, 17509, 17465, 14563, 18538, 18146, 19450, 19535, 12281, 15421, 19095, 15873, 18063,
    15271, 15540, 12210, 18461, 14094, 16089, 16631, 19283, 11879, 10508, 14488, 16807, 17131, 19805, 14074, 16427, 11825, 19732, 18737,
    18874, 19977, 18838, 15185, 17520, 18256, 14759, 16408, 11737, 17631, 14610, 13522, 17402, 13934, 17745, 12935, 11754, 14640, 19636,
    14364, 15313, 14884, 10261, 11263, 10949, 19275, 10469, 13107, 15854, 13191, 19337, 15784, 14747, 13420, 18271, 19418, 14800, 13906,
    18525, 16882, 19811, 11003, 11878, 17049, 18761, 18719, 13965, 12763, 15492, 18719, 17034, 16166, 16093, 13677, 11505, 15236, 15754,
    19108, 19289, 19757, 10496, 18137, 15600, 14555, 19391, 18641, 15760, 17051, 18220, 16771, 10932, 14416, 17150, 10088, 14300, 17166,
    17317, 12609, 18431, 19840, 11288, 10394, 19748, 15708, 15430, 17694, 12362, 12925, 15524, 18705, 10988, 19561, 14314, 12789, 18740,
    11480, 12179, 19674, 17554, 18580, 16573, 16444, 12836, 16911, 14702, 10439, 17602, 19848, 10956, 18902, 10360, 14737, 13020, 15324,
    11689, 13646, 11020, 12780, 18273, 11598, 19297, 17593, 15617, 13761, 19431, 14588, 13146, 14227, 11570, 19699, 14165, 13371, 14385,
    15904, 11788, 12221, 17017, 17181, 11413, 10008, 10792, 17985, 19361, 12471, 19993, 18039, 15313, 18604, 18710, 17506, 14376, 19084,
    14486, 18425, 17671, 12763, 13313, 12472, 17735, 17500, 17758, 17834, 17925, 18122, 10598, 19201, 14741, 18413, 17612, 12558, 10514,
    15431, 12153, 19339, 19487, 18427, 10162, 14467, 12876, 13560, 15702, 10830, 14905, 15475, 17902, 10929, 11745, 13410, 14163, 10018,
    13780, 10116, 13622, 12897, 14636, 15918, 16141, 18120, 17125, 17450, 15850, 12470, 13579, 11775, 10667, 12871, 18737, 13418, 10358,
    10424, 19702, 17881, 17775, 12941, 11915, 16976, 10815, 12053, 18113, 12763, 10157, 19297, 13229, 17071, 15951, 18349, 17403, 12563,
    14854, 10313, 13257, 15948, 17075, 17489, 10365, 17214, 19829, 19621, 10403, 18170, 12245, 12767, 18578, 16780, 11311, 14159, 17919,
    16690, 13065, 17386, 16294, 13723, 12704, 17879, 13926, 10362, 19063, 15411, 18623, 10444, 10287, 18912, 16204, 13457, 18386, 10137,
    10356, 19565, 13032, 17835, 19287, 17457, 19017, 13262, 10751, 14019, 12262, 10263, 14066, 15578, 16692, 19841, 18946, 18047, 14746,
    15956, 11257, 18108, 16633, 13213, 19530, 13232, 10946, 13632, 16299, 19110, 10381, 13079, 15660, 11267, 10191, 16996, 18139, 15718,
    13851, 19209, 18410, 13897, 13494, 12227, 12787, 17058, 11078, 12078, 18532, 13815, 13996, 12763, 17429, 14853, 13951, 16487, 10528,
    18610, 10135, 19825, 17064, 16816, 13424, 10196, 15620, 18446, 15069, 16183, 18808, 19553, 19127, 12094, 12964, 18405, 19303, 17877,
    15293, 16794, 16820, 16015, 16593, 11082, 19901, 13136, 17421, 15305, 13171, 15425, 12077, 11545, 15317, 16594, 10156, 12692, 13383,
    14198, 18652, 10411, 12086, 14884, 19194, 13006, 16069, 10879, 18049, 11095, 14682, 11174, 14704, 11851, 10925, 14958, 17837, 13079,
    15558, 16474, 14034, 11250, 10139, 10152, 19865, 10490, 12052, 14503, 11204, 19418, 10212, 12133, 11597, 15585, 12691, 11604, 19766,
    17078, 10703, 10401, 17378, 13298, 15397, 11350, 10620, 18403, 14751, 14355, 10918, 13528, 15896, 11155, 15078, 10060, 17614, 17242,
    10182, 19633, 15075, 15818, 18252, 16598, 15318, 11671, 12971, 12472, 10036, 15760, 18761, 18723, 13926, 14420, 17962, 16797, 11861,
    13500, 15616, 15753, 14711, 17490, 15957, 19984, 10606, 18462, 18789, 13320, 10018, 11566, 17359, 14134, 12307, 11925, 13250, 16773,
    16132, 17950, 16265, 15374, 15220, 16336, 18532, 12168, 10452, 13479, 19808, 19728, 14681, 11019, 19150, 13315, 15610, 10774, 13330,
    16706, 10191, 11696, 11802, 17884, 15063, 17312, 13382, 16275, 18842, 19104, 13525, 18949, 13648, 12734, 14893, 10549, 13375, 16413,
    10497, 16155, 14072, 19234, 12097, 12901, 13922, 18339, 15484, 18033, 14693, 15972, 10188, 15027, 11543, 17830, 16775, 14875, 17526,
    19066, 12136, 14784, 19167, 16275, 18493, 17348, 12110, 17138, 18496, 13267, 19125, 12265, 13995, 11210, 18660, 19665, 13634, 11518,
    10342, 12780, 17711, 11592, 14187, 12227, 14599, 13295, 11803, 13317, 18452, 19579, 14711, 15276, 15218, 14984, 15025, 11767, 10301,
    14704, 18541, 15150, 16314, 13632, 17842, 18343, 18375, 17597, 11787, 15867, 10680, 19701, 12338, 16561, 13957, 15909, 19353, 15263,
    15810, 13610, 16420, 11712, 18902, 14923, 14357, 10745, 17732, 16525, 13091, 13458, 19957, 18327, 13767, 15549, 10247, 12279, 10885,
    17399, 14842, 12786, 18647, 17305, 18518, 11749, 19750, 19578, 12848, 19291, 11096, 19985, 12363, 13075, 18214, 13496, 11519, 12965,
    18990, 19249, 17229, 18134, 18670, 17337, 10307, 13958, 16392, 17009, 10491, 12456, 10724, 11151, 11794, 18444, 15054, 19501, 11505,
    14447, 13114, 10151, 11898, 18820, 16467, 17888, 19497, 12205, 18336, 19143, 11518, 14416, 15200, 15643, 16912, 17373, 14477, 11956,
    18616, 11733, 19024, 16239, 15900, 19260, 18339, 14507, 10909, 12323, 19369, 11826, 12110, 11967, 17877, 19165, 17456, 12499, 13464,
    17803, 14458, 13744, 12981, 17184, 19392, 18262, 18096, 12465, 12505, 19649, 16851, 10892, 19694, 18865, 12632, 14460, 19557, 15306,
    12708, 13629, 13301, 18100, 14329, 13173, 19170, 16171, 19587, 14459, 17891, 15827, 12305, 19769, 14135, 10485, 19390, 18772, 16680,
    11683, 10234, 14084, 14678, 15048, 19274, 11723, 17546, 11381, 18373, 13283, 19799, 18624, 12121, 15419, 19547, 10424, 16763, 17851,
    10128, 16502, 10630, 19042, 11414, 16786, 14217, 12468, 17904, 15249, 10356, 13258, 17102, 18707, 16567, 17437, 14340, 13684, 12140,
    16992, 16318, 11353, 16781, 17105, 10722, 14776, 12970, 17936, 13051, 17267, 18357, 16448, 14114, 17276, 10800, 12090, 13500, 14823,
    15332, 13221, 18607, 17071, 12509, 10855, 12945, 17606, 13698, 13669, 18044, 14981, 13174, 12305, 16619, 18925, 10683, 14856, 15342,
    11387, 18194, 16278, 13744, 11538, 13798, 15120, 10101, 11109, 12715, 11857
};

#pragma endregion

namespace _random_access_iterator {

    TEST(RANDOM_ACCESS_ITERATOR, DEFAULT_CONSTRUCTOR) {
        // test the default ctor for const iterator
        constexpr random_access_iterator<const double> const_iterator {};
        EXPECT_FALSE(const_iterator._rsrc);
        EXPECT_FALSE(const_iterator._unwrapped());
        EXPECT_FALSE(const_iterator._length);
        EXPECT_FALSE(const_iterator._offset);

        // test the default ctor for mutable iterator
        constexpr random_access_iterator<char> mutable_iterator {};
        EXPECT_FALSE(mutable_iterator._rsrc);
        EXPECT_FALSE(mutable_iterator._unwrapped());
        EXPECT_FALSE(mutable_iterator._length);
        EXPECT_FALSE(mutable_iterator._offset);
    }

    TEST(RANDOM_ACCESS_ITERATOR, LOCAL_PTR_CONSTRUCTOR) {
        float frandoms[MAX_ELEMS] { 0.00 }; // NOLINT(modernize-avoid-c-arrays)

        std::mt19937_64 rndengine { static_cast<unsigned long long>(std::chrono::high_resolution_clock::now().time_since_epoch().count()) };
        std::uniform_real_distribution fgenerator { -0.5, 0.5 }; // min, max

        random_access_iterator fbegin { frandoms, __crt_countof(frandoms) };
        random_access_iterator fend { frandoms, __crt_countof(frandoms), __crt_countof(frandoms) };

        EXPECT_EQ(fbegin._rsrc, frandoms);
        EXPECT_EQ(fbegin._length, __crt_countof(frandoms));
        EXPECT_FALSE(fbegin._offset);

        EXPECT_EQ(fend._rsrc, frandoms);
        EXPECT_EQ(fend._length, __crt_countof(frandoms));
        EXPECT_EQ(fend._offset, __crt_countof(frandoms));
    }

    TEST(RANDOM_ACCESS_ITERATOR, STATIC_CONST_PTR_CONSTRUCTOR) {
        constexpr random_access_iterator ibegin { random_numbers, __crt_countof(random_numbers) };
        constexpr random_access_iterator iend { random_numbers, __crt_countof(random_numbers), __crt_countof(random_numbers) };

        EXPECT_EQ(ibegin._rsrc, random_numbers);
        EXPECT_EQ(ibegin._unwrapped(), random_numbers);
        EXPECT_EQ(ibegin._length, __crt_countof(random_numbers));
        EXPECT_FALSE(ibegin._offset);

        EXPECT_EQ(iend._rsrc, random_numbers);
        EXPECT_EQ(iend._unwrapped(), random_numbers);
        EXPECT_EQ(iend._length, __crt_countof(random_numbers));
        EXPECT_EQ(iend._offset, __crt_countof(random_numbers));
    }

    TEST(RANDOM_ACCESS_ITERATOR, HEAP_PTR_CONSTRUCTOR) {
        auto irandoms { std::unique_ptr<int[]>(new (std::nothrow) int[MAX_ELEMS]) }; // NOLINT(modernize-avoid-c-arrays)
        ASSERT_TRUE(irandoms.get());
        ::memset(
            irandoms.get(), 0, MAX_ELEMS * sizeof(decltype(irandoms)::element_type)
        ); // memory returned by new (std::nothrow) HAD garbage in it!!

        random_access_iterator ibegin { irandoms.get(), MAX_ELEMS };
        random_access_iterator iend { irandoms.get(), MAX_ELEMS, MAX_ELEMS };

        EXPECT_EQ(ibegin._rsrc, irandoms.get());
        EXPECT_EQ(ibegin._unwrapped(), irandoms.get());
        EXPECT_EQ(ibegin._length, MAX_ELEMS);
        EXPECT_FALSE(ibegin._offset);

        EXPECT_EQ(iend._rsrc, irandoms.get());
        EXPECT_EQ(iend._unwrapped(), irandoms.get());
        EXPECT_EQ(iend._length, MAX_ELEMS);
        EXPECT_EQ(iend._offset, MAX_ELEMS);
    }

    TEST(RANDOM_ACCESS_ITERATOR, COPY_CONSTRUCTOR) {
        constexpr random_access_iterator ibegin { random_numbers, __crt_countof(random_numbers) };
        constexpr random_access_iterator iend { random_numbers, __crt_countof(random_numbers), __crt_countof(random_numbers) };
        constexpr auto                   ibegin_cp { ibegin };
        constexpr auto                   iend_cp { iend };

        EXPECT_EQ(ibegin._rsrc, random_numbers);
        EXPECT_EQ(ibegin._unwrapped(), random_numbers);
        EXPECT_EQ(ibegin._length, __crt_countof(random_numbers));
        EXPECT_FALSE(ibegin._offset);

        EXPECT_EQ(ibegin_cp._rsrc, random_numbers);
        EXPECT_EQ(ibegin_cp._unwrapped(), random_numbers);
        EXPECT_EQ(ibegin_cp._length, __crt_countof(random_numbers));
        EXPECT_FALSE(ibegin_cp._offset);

        EXPECT_EQ(iend._rsrc, random_numbers);
        EXPECT_EQ(iend._unwrapped(), random_numbers);
        EXPECT_EQ(iend._length, __crt_countof(random_numbers));
        EXPECT_EQ(iend._offset, __crt_countof(random_numbers));

        EXPECT_EQ(iend_cp._rsrc, random_numbers);
        EXPECT_EQ(iend_cp._unwrapped(), random_numbers);
        EXPECT_EQ(iend_cp._length, __crt_countof(random_numbers));
        EXPECT_EQ(iend_cp._offset, __crt_countof(random_numbers));
    }

    TEST(RANDOM_ACCESS_ITERATOR, MOVE_CONSTRUCTOR) {
        random_access_iterator ibegin { random_numbers, __crt_countof(random_numbers) };
        random_access_iterator iend { random_numbers, __crt_countof(random_numbers), __crt_countof(random_numbers) };
        const auto             ibegin_mvd { std::move(ibegin) };
        const auto             iend_mvd { std::move(iend) };

        EXPECT_FALSE(ibegin._rsrc, random_numbers);
        EXPECT_FALSE(ibegin._unwrapped(), random_numbers);
        EXPECT_FALSE(ibegin._length, __crt_countof(random_numbers));
        EXPECT_FALSE(ibegin._offset);

        EXPECT_EQ(ibegin_mvd._rsrc, random_numbers);
        EXPECT_EQ(ibegin_mvd._unwrapped(), random_numbers);
        EXPECT_EQ(ibegin_mvd._length, __crt_countof(random_numbers));
        EXPECT_FALSE(ibegin_mvd._offset);

        EXPECT_FALSE(iend._rsrc);
        EXPECT_FALSE(iend._unwrapped());
        EXPECT_FALSE(iend._length);
        EXPECT_FALSE(iend._offset);

        EXPECT_EQ(iend_mvd._rsrc, random_numbers);
        EXPECT_EQ(iend_mvd._unwrapped(), random_numbers);
        EXPECT_EQ(iend_mvd._length, __crt_countof(random_numbers));
        EXPECT_EQ(iend_mvd._offset, __crt_countof(random_numbers));
    }

} // namespace _random_access_iterator

namespace _strided_random_access_iterator {

    //

}

/*
void TEST_ITERATORS() noexcept {


    // test the copy ctor
    

    // test the move ctor
    auto fbegin_mv { std::move(fbegin) };
    auto fend_mv { std::move(fend) };

    assert(fbegin_mv._rsrc == frandoms);
    assert(fbegin_mv._unwrapped() == frandoms);
    assert(fbegin_mv._length == __crt_countof(frandoms));
    assert(!fbegin_mv._offset);

    assert(fend_mv._rsrc == frandoms);
    assert(fend_mv._unwrapped() == frandoms);
    assert(fend_mv._length == __crt_countof(frandoms));
    assert(fend_mv._offset == __crt_countof(frandoms));

    // test whether the moved from objects have been invalidated
    assert(!fbegin._rsrc); // NOLINT(bugprone-use-after-move)
    assert(!fbegin._unwrapped());
    assert(!fbegin._length);
    assert(!fbegin._offset);

    assert(!fend._rsrc); // NOLINT(bugprone-use-after-move)
    assert(!fend._unwrapped());
    assert(!fend._length);
    assert(!fend._offset);

    // fill the array with values
    std::iota(ibegin + 10, iend, 11); // start filing from 11th element, first 10 will be 0s.

    // first 200 will be between std::uniform_real_distribution::min() and std::uniform_real_distribution::max()
    assert(MAX_ELEMS >= 200);
    std::generate(fbegin_mv, fbegin_mv + 200, [&fgenerator, &rndengine]() noexcept -> auto {
        return static_cast<decltype(fbegin_mv)::value_type>(fgenerator(rndengine));
    });

    // the rest will be filled by the random engine without any limit constraints
    std::generate(fbegin_mv + 200, fend_mv, [&rndengine]() noexcept -> auto { return static_cast<float>(rndengine()); });

    assert(std::all_of(fbegin_mv, fbegin_mv + 200, [](const decltype(fbegin_mv)::value_type& _) noexcept -> bool {
        return _ >= -0.5 && _ <= 0.5;
    }));

    // double check it with a raw for loop
    for (unsigned i = 0; i < 200; ++i)
        assert(frandoms[i] >= -0.5 && frandoms[i] <= 0.5); // NOLINT(cppcoreguidelines-pro-bounds-constant-array-index)

    assert(ibegin._unwrapped() == irandoms.get());
    assert(std::all_of(ibegin, ibegin + 10, [](const decltype(ibegin)::value_type& _) noexcept -> bool { return !_; }));

    assert(iend._unwrapped() == irandoms.get());

    // const_iterators
    random_access_iterator<const int> cibegin { irandoms.get(), MAX_ELEMS };
    random_access_iterator<const int> ciend { irandoms.get(), MAX_ELEMS, MAX_ELEMS };

    assert(cibegin._unwrapped() == irandoms.get());
    assert(ciend._unwrapped() == irandoms.get());
    assert(std::all_of(cibegin, cibegin + 10, [](const decltype(cibegin)::value_type& _) noexcept -> bool { return !_; }));
    assert(*(cibegin + 10) == 11);

    assert(std::accumulate(ibegin, iend, 0LL) == std::accumulate(cibegin, ciend, 0LL));
    assert(!std::accumulate(cibegin, cibegin + 10, 0LL)); // we did this with std::all_of before!

    const auto isum  = std::accumulate(ibegin, iend, 0LL);
    const auto cisum = std::accumulate(cibegin, ciend, 0LL);
    const auto _sum  = std::accumulate(irandoms.get(), irandoms.get() + MAX_ELEMS, 0LL);
    assert(isum == _sum);
    assert(cisum == _sum);

    for (auto it = irandoms.get(), end = irandoms.get() + MAX_ELEMS; it != end; ++it, ++ibegin_cp) assert(*it == *ibegin_cp);
    ibegin_cp.reset();
    assert(ibegin == ibegin_cp);

    const std::vector<decltype(fbegin_mv)::value_type> from_iterators_0 { fbegin_mv, fend_mv }; // AddressSanitizer: stack-use-after-scope
    assert(from_iterators_0.size() == MAX_ELEMS);

    const std::vector<decltype(ibegin)::value_type> from_iterators_1 { ibegin, iend };
    assert(from_iterators_1.size() == MAX_ELEMS);

    // iterators to a constant buffer
    random_access_iterator       randoms_begin { random_numbers, __crt_countof(random_numbers) };
    const random_access_iterator randoms_end { random_numbers, __crt_countof(random_numbers), __crt_countof(random_numbers) };

    for (const auto& i : std::ranges::views::iota(0u, __crt_countof(random_numbers))) assert(random_numbers[i] == *randoms_begin++);
    assert(randoms_begin == randoms_end);

#pragma endregion

#pragma region TEST_STRIDED_RANDOM_ACCESS_ITERATOR

    // test the strided_random_access_iterator
    uint64_t pos {};

    std::array<unsigned, NSTRIDES> random_strides {}; // random strides between 1 and 200
    std::uniform_int_distribution  uintdist { 1, 200 };
    assert(uintdist.max() <= __crt_countof(random_numbers));

    std::generate(random_strides.begin(), random_strides.end(), [&uintdist, &rndengine]() noexcept -> unsigned {
        return static_cast<decltype(random_strides)::value_type>(uintdist(rndengine));
    });

    constexpr strided_random_access_iterator rcend {
        random_numbers, __crt_countof(random_numbers), __crt_countof(random_numbers), 1
    }; // _stride does not participate in comparison operations

    for (const auto& stride : random_strides) { // test the iterator with NSTRIDES randomly generated strides
        strided_random_access_iterator start { random_numbers, __crt_countof(random_numbers), stride };
        //
    }

#pragma endregion

    ::_putws(L"TEST_ITERATORS passed :)");
}

*/